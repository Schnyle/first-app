[{"/home/kyle/code/first-app/client/src/index.js":"1","/home/kyle/code/first-app/client/src/components/App.js":"2","/home/kyle/code/first-app/client/src/components/Board.js":"3","/home/kyle/code/first-app/client/src/components/PiecePngs.js":"4"},{"size":194,"mtime":1678842978779,"results":"5","hashOfConfig":"6"},{"size":1199,"mtime":1678973636804,"results":"7","hashOfConfig":"6"},{"size":3873,"mtime":1678970434834,"results":"8","hashOfConfig":"6"},{"size":712,"mtime":1678916853790,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1ydag77",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kyle/code/first-app/client/src/index.js",[],[],[],"/home/kyle/code/first-app/client/src/components/App.js",[],[],"/home/kyle/code/first-app/client/src/components/Board.js",["24","25","26","27","28","29","30","31","32"],[],"import { createGlobalStyle } from 'styled-components';\nimport Draggable from 'react-draggable';\n\nimport piece_dictionary from './PiecePngs';\n\nconst BoardStyle = createGlobalStyle`\n\n    .board-container {\n        height: 40vw;\n        width: 40vw;\n        display: grid;\n        grid-template-columns: repeat(8, 1fr);\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    .light-square, .dark-square, .trans-square {\n        height: 5vw;\n        width: 5vw;\n        display: flex;\n    }\n\n    .trans-square {\n      border: 1px solid black;\n      opacity: 0;\n      height: 100%;\n      width: 100%;\n      z-index: 1;\n    }\n\n    .light-square {\n        background-color: var(--white);\n    }\n\n    .dark-square {\n        background-color: var(--purple);\n    }\n\n    img {\n      z-index: 0;\n    }\n\n`\n\nconst getSquares = (posDiff, square_dim) => {\n  const posDiffSign = (posDiff > 0 ? 1 : -1)\n  let squares = posDiffSign\n  if (Math.abs(posDiff) < square_dim / 2) {\n    return 0\n  };\n  posDiff = posDiff - (posDiffSign * square_dim / 2)\n  while(Math.abs(posDiff) > square_dim) {\n    squares += (posDiffSign)\n    posDiff -= (posDiffSign * square_dim)\n  };\n  return squares\n};\n\nfunction Board({ gameState, handleMove }) {\n\n    const square_dim_x = window.innerWidth / 20\n    const square_dim_y = square_dim_x + 2 // potential problem later on\n    let fromIndex;\n    let toIndex;\n\n    const state = {\n        activeDrags: 0,\n        deltaPosition: {x: 0, y: 0}\n    }\n\n    const handleDrag = (e, ui) => {\n        const {x, y} = state.deltaPosition;\n        state.deltaPosition = {\n          x: x + ui.deltaX,\n          y: y + ui.deltaY\n        };\n    };\n    const onStart = (e, i) => {\n        ++state.activeDrags\n        fromIndex = i\n        // console.log('fromIndex', fromIndex)\n    };\n    const onStop = (e) => {\n        --state.activeDrags;\n        const xSquares = getSquares(state.deltaPosition.x, square_dim_x)\n        const ySquares = getSquares(state.deltaPosition.y, square_dim_y)\n        // console.log('x, y: ', xSquares, ySquares)\n        toIndex = fromIndex + (8 * ySquares) + xSquares\n        // console.log('toIndex', toIndex)\n        handleMove(fromIndex, toIndex)\n    };\n\n    const pieces_array = gameState.pieces.split('')\n    const colors_array = gameState.colors.split('')\n\n    if (pieces_array.length == 0 || colors_array.length == 0) {\n        return <></>\n    };\n\n    const boardDivs = [];\n    \n    let row = 0;\n    for (let i = 0; i < 64; i++) {\n        // set color\n        let shade;\n        if ((i % 2 == 0 && row % 2 == 0) || (i % 2 == 1 && row % 2 == 1)) {\n            shade = 'light'\n        } else shade = 'dark';\n\n        // set piece\n        let piecePng;\n        if (colors_array[i] == 'E') {\n            piecePng = ''\n        } else {\n            const color = colors_array[i];\n            const piece = pieces_array[i];\n            piecePng = piece_dictionary[`${color}${piece}`]\n        };\n\n        const square_id = `square${i}`;\n        boardDivs.push(\n          <div \n            className={`${shade}-square`} \n            key={i}\n          >\n            <Draggable \n              onDrag={handleDrag}\n              onStart={(e) => onStart(e, i)}\n              onStop={onStop}\n              bounds='.board-container'\n            >\n              <img draggable='false' src={piecePng} />\n            </Draggable>\n            <div \n              id={square_id} \n              className='trans-square' \n            ></div>\n          </div>\n        )\n        \n        if ((i + 1) % 8 == 0) {\n            row += 1\n        };\n\n    }\n\n    return (\n        <>\n          <BoardStyle />\n          <div className='board-container'>\n            {boardDivs}\n          </div>\n          <h2>\n            {state.deltaPosition.x.toFixed(0)}\n          </h2>\n        </>\n    );\n}\n\nexport default Board;","/home/kyle/code/first-app/client/src/components/PiecePngs.js",[],[],{"ruleId":"33","severity":1,"message":"34","line":98,"column":29,"nodeType":"35","messageId":"36","endLine":98,"endColumn":31},{"ruleId":"33","severity":1,"message":"34","line":98,"column":57,"nodeType":"35","messageId":"36","endLine":98,"endColumn":59},{"ruleId":"33","severity":1,"message":"34","line":108,"column":20,"nodeType":"35","messageId":"36","endLine":108,"endColumn":22},{"ruleId":"33","severity":1,"message":"34","line":108,"column":36,"nodeType":"35","messageId":"36","endLine":108,"endColumn":38},{"ruleId":"33","severity":1,"message":"34","line":108,"column":52,"nodeType":"35","messageId":"36","endLine":108,"endColumn":54},{"ruleId":"33","severity":1,"message":"34","line":108,"column":68,"nodeType":"35","messageId":"36","endLine":108,"endColumn":70},{"ruleId":"33","severity":1,"message":"34","line":114,"column":29,"nodeType":"35","messageId":"36","endLine":114,"endColumn":31},{"ruleId":"37","severity":1,"message":"38","line":134,"column":15,"nodeType":"39","endLine":134,"endColumn":55},{"ruleId":"33","severity":1,"message":"34","line":143,"column":25,"nodeType":"35","messageId":"36","endLine":143,"endColumn":27},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]