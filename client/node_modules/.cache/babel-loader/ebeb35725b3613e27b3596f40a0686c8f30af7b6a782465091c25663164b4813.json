{"ast":null,"code":"var _jsxFileName = \"/home/kyle/code/first-app/client/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport Draggable from 'react-draggable';\nimport piece_dictionary from './PiecePngs';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardStyle = createGlobalStyle`\n\n    .board-container {\n        height: 40vw;\n        width: 40vw;\n        display: grid;\n        grid-template-columns: repeat(8, 1fr);\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    .light-square, .dark-square, .trans-square {\n        height: 5vw;\n        width: 5vw;\n        display: flex;\n    }\n\n    .trans-square {\n      border: 1px solid black;\n      opacity: 0;\n      height: 100%;\n      width: 100%;\n      z-index: 1;\n    }\n\n    .light-square {\n        background-color: var(--white);\n    }\n\n    .dark-square {\n        background-color: var(--purple);\n    }\n\n    img {\n      z-index: 0;\n    }\n\n`;\n_c = BoardStyle;\nconst getSquares = (posDiff, square_dim) => {\n  const posDiffSign = posDiff > 0 ? 1 : -1;\n  let squares = posDiffSign;\n  if (Math.abs(posDiff) < square_dim / 2) {\n    return 0;\n  }\n  ;\n  posDiff = posDiff - posDiffSign * square_dim / 2;\n  while (Math.abs(posDiff) > square_dim) {\n    squares += posDiffSign;\n    posDiff -= posDiffSign * square_dim;\n  }\n  ;\n  return squares;\n};\nfunction Board(_ref) {\n  _s();\n  let {\n    gameState,\n    handleMove\n  } = _ref;\n  const [controlledPositions, setControlledPositions] = useState(new Array(64).fill({\n    x: 0,\n    y: 0\n  }));\n  const square_dim_x = window.innerWidth / 20;\n  const square_dim_y = square_dim_x + 2; // potential problem later on\n\n  const handleDrag = (e, ui, index) => {\n    const {\n      x,\n      y\n    } = controlledPositions[index];\n    setControlledPositions(positions => {\n      const newPositions = [...positions];\n      newPositions[index] = {\n        x: x + ui.deltaX,\n        y: y + ui.deltaY\n      };\n      return newPositions;\n    });\n  };\n  const onStop = async (e, dragElement, i) => {\n    const xSquares = getSquares(controlledPositions[i].x, square_dim_x);\n    const ySquares = getSquares(controlledPositions[i].y, square_dim_y);\n    let fromIndex = i;\n    let toIndex = fromIndex + 8 * ySquares + xSquares;\n    const validMove = await handleMove(fromIndex, toIndex);\n    if (!validMove) {\n      setControlledPositions(positions => {\n        const newPositions = [...positions];\n        newPositions[i] = {\n          x: 0,\n          y: 0\n        };\n        return newPositions;\n      });\n    }\n    ;\n  };\n  const pieces_array = gameState.pieces.split('');\n  const colors_array = gameState.colors.split('');\n  if (pieces_array.length == 0 || colors_array.length == 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Chess board data not recieved.\"\n    }, void 0, false);\n  }\n  ;\n  const boardDivs = [];\n  let row = 0;\n  for (let i = 0; i < 64; i++) {\n    // set color\n    let shade;\n    if (i % 2 == 0 && row % 2 == 0 || i % 2 == 1 && row % 2 == 1) {\n      shade = 'light';\n    } else shade = 'dark';\n\n    // set piece\n    let piecePng;\n    if (colors_array[i] == 'E') {\n      piecePng = '';\n    } else {\n      const color = colors_array[i];\n      const piece = pieces_array[i];\n      piecePng = piece_dictionary[`${color}${piece}`];\n    }\n    ;\n    const square_id = `square${i}`;\n    boardDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${shade}-square`,\n      children: [/*#__PURE__*/_jsxDEV(Draggable, {\n        onDrag: (e, ui) => handleDrag(e, ui, i),\n        onStop: (e, dragElement) => onStop(e, dragElement, i),\n        bounds: \".board-container\",\n        position: controlledPositions[i],\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          draggable: \"false\",\n          src: piecePng\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: square_id,\n        className: \"trans-square\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }, this));\n    if ((i + 1) % 8 == 0) {\n      row += 1;\n    }\n    ;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BoardStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: boardDivs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"mREmtw9AU6WQSYnL5OdX1x3Qusc=\");\n_c2 = Board;\nexport default Board;\nvar _c, _c2;\n$RefreshReg$(_c, \"BoardStyle\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"names":["useState","createGlobalStyle","Draggable","piece_dictionary","Fragment","_Fragment","jsxDEV","_jsxDEV","BoardStyle","_c","getSquares","posDiff","square_dim","posDiffSign","squares","Math","abs","Board","_ref","_s","gameState","handleMove","controlledPositions","setControlledPositions","Array","fill","x","y","square_dim_x","window","innerWidth","square_dim_y","handleDrag","e","ui","index","positions","newPositions","deltaX","deltaY","onStop","dragElement","i","xSquares","ySquares","fromIndex","toIndex","validMove","pieces_array","pieces","split","colors_array","colors","length","children","boardDivs","row","shade","piecePng","color","piece","square_id","push","className","onDrag","bounds","position","draggable","src","fileName","_jsxFileName","lineNumber","columnNumber","id","_c2","$RefreshReg$"],"sources":["/home/kyle/code/first-app/client/src/components/Board.js"],"sourcesContent":["import { useState } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport Draggable from 'react-draggable';\n\nimport piece_dictionary from './PiecePngs';\n\nconst BoardStyle = createGlobalStyle`\n\n    .board-container {\n        height: 40vw;\n        width: 40vw;\n        display: grid;\n        grid-template-columns: repeat(8, 1fr);\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    .light-square, .dark-square, .trans-square {\n        height: 5vw;\n        width: 5vw;\n        display: flex;\n    }\n\n    .trans-square {\n      border: 1px solid black;\n      opacity: 0;\n      height: 100%;\n      width: 100%;\n      z-index: 1;\n    }\n\n    .light-square {\n        background-color: var(--white);\n    }\n\n    .dark-square {\n        background-color: var(--purple);\n    }\n\n    img {\n      z-index: 0;\n    }\n\n`\n\nconst getSquares = (posDiff, square_dim) => {\n  const posDiffSign = (posDiff > 0 ? 1 : -1)\n  let squares = posDiffSign\n  if (Math.abs(posDiff) < square_dim / 2) {\n    return 0\n  };\n  posDiff = posDiff - (posDiffSign * square_dim / 2)\n  while(Math.abs(posDiff) > square_dim) {\n    squares += (posDiffSign)\n    posDiff -= (posDiffSign * square_dim)\n  };\n  return squares\n};\n\nfunction Board({ gameState, handleMove }) {\n\n    const [controlledPositions, setControlledPositions] = useState(new Array(64).fill({ x: 0, y: 0 }));\n\n    const square_dim_x = window.innerWidth / 20\n    const square_dim_y = square_dim_x + 2 // potential problem later on\n\n    const handleDrag = (e, ui, index) => {\n      const { x, y } = controlledPositions[index];\n      setControlledPositions((positions) => {\n        const newPositions = [...positions];\n        newPositions[index] = { x: x + ui.deltaX, y: y + ui.deltaY };\n        return newPositions;\n      });\n    };\n\n    const onStop = async (e, dragElement, i) => {\n        const xSquares = getSquares(controlledPositions[i].x, square_dim_x);\n        const ySquares = getSquares(controlledPositions[i].y, square_dim_y);\n\n        let fromIndex = i;\n        let toIndex = fromIndex + (8 * ySquares) + xSquares;\n\n        const validMove = await handleMove(fromIndex, toIndex);\n        if (!validMove) {\n          setControlledPositions((positions) => {\n            const newPositions = [...positions];\n            newPositions[i] = { x: 0, y: 0 };\n            return newPositions;\n          })\n        };\n    };\n\n    const pieces_array = gameState.pieces.split('')\n    const colors_array = gameState.colors.split('')\n\n    if (pieces_array.length == 0 || colors_array.length == 0) {\n        return <>Chess board data not recieved.</>\n    };\n\n    const boardDivs = [];\n    \n    let row = 0;\n    for (let i = 0; i < 64; i++) {\n        // set color\n        let shade;\n        if ((i % 2 == 0 && row % 2 == 0) || (i % 2 == 1 && row % 2 == 1)) {\n            shade = 'light'\n        } else shade = 'dark';\n\n        // set piece\n        let piecePng;\n        if (colors_array[i] == 'E') {\n            piecePng = ''\n        } else {\n            const color = colors_array[i];\n            const piece = pieces_array[i];\n            piecePng = piece_dictionary[`${color}${piece}`]\n        };\n\n        const square_id = `square${i}`;\n        boardDivs.push(\n          <div \n            className={`${shade}-square`} \n            key={i}\n          >\n            <Draggable \n              onDrag={(e, ui) => handleDrag(e, ui, i)}\n              onStop={(e, dragElement) => onStop(e, dragElement, i)}\n              bounds='.board-container'\n              position={controlledPositions[i]}\n            >\n              <img draggable='false' src={piecePng} />\n            </Draggable>\n            <div \n              id={square_id} \n              className='trans-square' \n            ></div>\n          </div>\n        )\n        \n        if ((i + 1) % 8 == 0) {\n            row += 1\n        };\n\n    }\n\n    return (\n        <>\n          <BoardStyle />\n          <div className='board-container'>\n            {boardDivs}\n          </div>\n        </>\n    );\n}\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}